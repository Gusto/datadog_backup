#!/usr/bin/env ruby

$:.unshift File.join(File.dirname(__FILE__), '../lib')

require 'logger'
require 'optparse'

require 'datadog_sync'
require 'dogapi'

$stdout.sync = $stderr.sync = true
LOGGER = Logger.new($stderr) unless defined?(LOGGER)
LOGGER.level = Logger::INFO

##
# Default parameters
@options = {
  action: nil,
  client: nil,
  output_dir: File.join(ENV.fetch('PWD'), 'output'),
  resources: [DatadogSync::Dashboards, DatadogSync::Monitors],
  logger: LOGGER
}

def prereqs
  ARGV << '--help' if ARGV.empty?

  opts = OptionParser.new do |opts|
    opts.banner = "Usage: #{File.basename($0)} <backup|restore>"
    opts.separator ''
    opts.on_tail('-h', '--help', 'Show this message') do
      puts opts
      exit 0
    end
    opts.on('--verbose', '-v', 'verbose') do
      LOGGER.level = Logger::DEBUG
    end
    opts.on('--backup-dir PATH') do |path|
      @options[:backup_dir] = path
    end
    opts.on('--monitors-only') do
      @options[:resources] = [DatadogSync::Monitors]
    end
    opts.on('--dashboards-only') do
      @options[:resources] = [DatadogSync::Dashboards]
    end
    opts.on('--dashboards-only') do
      @options[:resources] = [DatadogSync::Dashboards]
    end
  end
  opts.parse!

  @options[:action] = ARGV.first
  if %w[backup restore].include?(@options[:action])
  else
    puts opts
    exit 0
  end

  required_vars = %w[
    DATADOG_API_KEY
    DATADOG_APP_KEY
  ]
  required_vars.each do |v|
    raise "#{v} must be specified in the environment variables" unless ENV[v]
  end
end

def main
  @options[:client] = Dogapi::Client.new(
    ENV.fetch('DATADOG_API_KEY'),
    ENV.fetch('DATADOG_APP_KEY')
  )
  @options[:resources].each do |resource|
    resource.new(@options).execute!
  end
rescue StandardError => e
  LOGGER.error "Unhandled exception #{e.class}: #{e.message}"
  e.backtrace.each do |v|
    LOGGER.debug v
  end
  raise
end

prereqs
main
